{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["BONUS_TILES","ROUND_TILES","COLORS","FACTIONS","faction","color","App","renderCount","useForm","register","handleSubmit","watch","errors","useState","predictions","setPredictions","setModel","makePrediction","gamestate","console","log","onehot","Array","fill","i","parseInt","prevColors","indexOf","nPrevPlayers","gamestateInputs","length","from","myColor","colorIndex","a","tf","model","output","predict","sortedPredictions","dataSync","unavailableColors","push","fact","score","class","includes","sort","b","className","onSubmit","data","disabled","type","map","x","key","name","ref","onChange","value","y","id","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1c3fdb5.chunk.js","sourcesContent":["\nconst BONUS_TILES = [\n    \"BON1: SPD +2C\",\n    \"BON2: CULT +4C\",\n    \"BON3: +6C\",\n    \"BON4: +3PW 1SHIP\",\n    \"BON5: +1W +3PW\",\n    \"BON6: pass-vp:SA*4,SH*4  +2W\",\n    \"BON7: pass-vp:TP*2 +1W\",\n    \"BON8: +1P\",\n    \"BON9: pass-vp:D*1 +2C\",\n    \"BON10: pass-vp:ship*3 +3PW\"\n];\nconst ROUND_TILES = [\n    \"SCORE1: SPD>>2vp, 1EARTH->1C\",\n    \"SCORE2: TOWN>>5vp, 4EARTH->1SPD\",\n    \"SCORE3: D>>2vp, 4WATER->1P\",\n    \"SCORE4: SA/SH>>5vp, 2FIRE->1W\",\n    \"SCORE5: D>>2vp, 4FIRE->4PW\",\n    \"SCORE6: TP>>3vp, 4WATER->1SPD\",\n    \"SCORE7: SA/SH>>5vp, 2AIR->1W\",\n    \"SCORE8: TP>>3vp, 4AIR->1SPD\",\n    \"SCORE9: TE>>4vp, 1CULT->2C\"\n];\nconst COLORS = [\n    \"black\",\n    \"blue\",\n    \"brown\",\n    \"gray\",\n    \"green\",\n    \"red\",\n    \"yellow\"\n];\nconst FACTIONS = [\n    {\n        faction: \"Alchemists\",\n        color: \"black\"\n    },\n    {\n        faction: \"Auren\",\n        color: \"green\"\n    },\n    {\n        faction: \"Chaos Magicians\",\n        color: \"red\"\n    },\n    {\n        faction: \"Cultists\",\n        color: \"brown\"\n    },\n    {\n        faction: \"Darklings\",\n        color: \"black\"\n    },\n    {\n        faction: \"Dwarves\",\n        color: \"gray\"\n    },\n    {\n        faction: \"Engineers\",\n        color: \"gray\"\n    },\n    {\n        faction: \"Fakirs\",\n        color: \"yellow\"\n    },\n    {\n        faction: \"Giants\",\n        color: \"red\"\n    },\n    {\n        faction: \"Halflings\",\n        color: \"brown\"\n    },\n    {\n        faction: \"Mermaids\",\n        color: \"blue\"\n    },\n    {\n        faction: \"Nomads\",\n        color: \"yellow\"\n    },\n    {\n        faction: \"Swarmlings\",\n        color: \"blue\"\n    },\n    {\n        faction: \"Witches\",\n        color: \"green\"\n    }\n];\n\nexport { BONUS_TILES, ROUND_TILES, COLORS, FACTIONS };\n","import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport { BONUS_TILES, ROUND_TILES, COLORS, FACTIONS } from \"./data.js\";\n\nlet renderCount = 0;\n\nfunction App() {\n  renderCount++;\n  const GAMESTATE_LENGTH = 119;\n  const { register, handleSubmit, watch, errors } = useForm();\n  // const [gamestate, setGamestate] = useState(null);\n  const onSubmit = data => {\n    //setGamestate(data);\n    //makePrediction();\n  }\n  const [predictions, setPredictions] = useState([]);\n  const [model, setModel] = useState(null);\n  const [sortedPredictions, setSortedPredictions] = useState([]);\n\n  const makePrediction = () => {\n\n    //first three elements of gamestate: missing bonus tiles by index\n    //next 6 are round scoring tiles by index\n    //last three are already-selected factions by index (\"none\" if not selected)\n\n    let gamestate = [watch(\"bonus1\"), watch(\"bonus2\"), watch(\"bonus3\"), watch(\"round1\"), watch(\"round2\"), watch(\"round3\"), watch(\"round4\"), watch(\"round5\"), watch(\"round6\"), watch(\"fact1\"), watch(\"fact2\"), watch(\"fact3\")];\n    console.log(gamestate);\n    let onehot = new Array(GAMESTATE_LENGTH).fill(0);\n\n    //first 10 digits of onehot encoding get a 1 if indexed bonus tile is missing\n    //index 0-9\n    onehot[gamestate[0]] = 1;\n    onehot[gamestate[1]] = 1;\n    onehot[gamestate[2]] = 1;\n\n    //index 10-18\n    //next 9 digits get a 1 if indexed round tile is missing\n    //first set all to 1...\n    for (let i = 10; i < 19; i++) {\n      onehot[i] = 1;\n    }\n    //...then set to 0 if round tile is found in gamestate\n    for (let i = 3; i < 9; i++) {\n      if (gamestate[i] !== \"-\") {\n        onehot[parseInt(gamestate[i]) + 10] = 0;\n      }\n    }\n    console.log(onehot);\n\n    //index 19-72\n    //next 6*9=54 bits are onehot encoding of round bonus tiles. \n    for (let i = 0; i < 6; i++) {\n      onehot[parseInt(gamestate[i + 3]) + 19 + (i * 9)] = 1;\n    }\n\n    //index 73-86\n    //onehot encoding of previously selected factions\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        onehot[parseInt(gamestate[i + 9]) + 73] = 1;\n      }\n    }\n\n    //index 87-93\n    //onehot encoding of previously selected colors\n    let prevColors = [];\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        prevColors[i] = COLORS.indexOf(FACTIONS[parseInt(gamestate[i + 9])].color);\n      }\n      onehot[parseInt(prevColors[i]) + 87] = 1;\n    }\n\n    //index 94-97\n    //onehot encoding of your player number\n    let nPrevPlayers = 0;\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        nPrevPlayers++;\n      }\n    }\n    onehot[nPrevPlayers + 94] = 1;\n\n\n\n    //console.log(onehot);\n    let gamestateInputs = [];\n    for (let i = 0; i < FACTIONS.length; i++) {\n      //      gamestateInputs[i] = new Array(GAMESTATE_LENGTH).fill(0);\n      gamestateInputs[i] = Array.from(onehot);\n      //encode faction to predict for\n      gamestateInputs[i][98 + i] = 1;\n      //encode color for this faction\n      var myColor = FACTIONS[i].color;\n      var colorIndex = COLORS.indexOf(myColor);\n      gamestateInputs[i][112 + colorIndex] = 1;\n    }\n\n    (async () => {\n      const model = await tf.loadLayersModel('./model/model.json');\n      setModel(model);\n      const pred = tf.tidy(() => {\n        const output = model.predict(tf.tensor(gamestateInputs));\n        let sortedPredictions = Array.from(output.dataSync());\n        let unavailableColors = [];\n\n        for (let i = 0; i < 3; i++) {\n          if (gamestate[i + 9] !== \"none\") {\n            unavailableColors.push(FACTIONS[parseInt(gamestate[i + 9])].color);\n          }\n        }\n        // console.log(\"unavailable colors: \" + unavailableColors);\n        for (let i = 0; i < sortedPredictions.length; i++) {\n          sortedPredictions[i] = { fact: FACTIONS[i].faction, color: FACTIONS[i].color, score: sortedPredictions[i], class: (unavailableColors.includes(FACTIONS[i].color) ? \"unavailable\" : FACTIONS[i].color) }\n        }\n        sortedPredictions.sort((a, b) => (a.score < b.score) ? 1 : -1);\n\n        console.log(sortedPredictions);\n        setPredictions(sortedPredictions);\n      });\n    })();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>Render Counter: {renderCount}</p> */}\n        {/* <h2>Terra Mystica Faction Picker</h2> */}\n        <h3>Load Game from Snellman (coming soon!)</h3>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div><input disabled type=\"text\"></input><button disabled>LOAD</button></div>\n          <h3>Missing Bonus Tiles</h3>\n          {/* \n        ~~~Checkbox UI~~~\n        <ul class=\"inputList\">\n          {BONUS_TILES.map((x, y) => <li><input key={y} type='checkbox' />{x}</li>)}\n        </ul> */}\n          {[...Array(3)].map((x, i) =>\n            <div key={i}><select name={\"bonus\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"-\">-</option>{BONUS_TILES.map((x, y) => <option key={y} value={y}>{x}</option>)}</select></div>\n          )}\n          <h3>Scoring Tiles</h3>\n          {[...Array(6)].map((x, i) =>\n            <div key={i}>Round {i + 1}: <select name={\"round\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"-\">-</option>{ROUND_TILES.map((x, y) => <option key={y} value={y}>{x}</option>)}</select></div>\n          )\n          }\n          <h3>Already Selected Factions</h3>\n\n          {\n            [...Array(3)].map((x, i) =>\n              <div key={i}><select name={\"fact\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"none\">none</option>{FACTIONS.map((x, y) => <option key={y} value={y}>{x.faction}</option>)}</select></div>\n            )\n          }\n          <h3>Predictions</h3>\n\n          {/* <input type=\"submit\" /> */}\n        </form>\n        <div>\n          <table id=\"predictionsList\">\n            <tbody>\n              {predictions.map((x, i) =>\n                <tr key={i} className={x.class}><td>{x.fact}</td><td>\n                  {x.score.toFixed(3)}</td></tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </header >\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}