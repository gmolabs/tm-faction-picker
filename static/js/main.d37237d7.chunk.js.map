{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["BONUS_TILES","ROUND_TILES","COLORS","FACTIONS","faction","color","App","renderCount","useForm","register","handleSubmit","watch","errors","useState","predictions","setPredictions","setModel","gameURL","setRoundScoreTiles","global_events","i","score","round","all","Object","keys","document","getElementsByName","value","setFactions","factions","select_elem","j","length","toLowerCase","setMissingBonusTiles","ledger","bon_num","comment","num_removed","startsWith","parseInt","makePrediction","gamestate","onehot","Array","fill","prevColors","indexOf","nPrevPlayers","gamestateInputs","from","myColor","colorIndex","a","tf","model","output","predict","sortedPredictions","dataSync","unavailableColors","push","fact","class","includes","sort","b","className","onSubmit","data","id","type","defaultValue","onClick","xhr","XMLHttpRequest","onreadystatechange","readyState","status","game_state","JSON","parse","response","events","global","order","open","setRequestHeader","payload","getElementById","send","map","x","key","name","ref","onChange","y","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d37237d7.chunk.js","sourcesContent":["\nconst BONUS_TILES = [\n    \"BON1: SPD +2C\",\n    \"BON2: CULT +4C\",\n    \"BON3: +6C\",\n    \"BON4: +3PW 1SHIP\",\n    \"BON5: +1W +3PW\",\n    \"BON6: pass-vp:SA*4,SH*4  +2W\",\n    \"BON7: pass-vp:TP*2 +1W\",\n    \"BON8: +1P\",\n    \"BON9: pass-vp:D*1 +2C\",\n    \"BON10: pass-vp:ship*3 +3PW\"\n];\nconst ROUND_TILES = [\n    \"SCORE1: SPD>>2vp, 1EARTH->1C\",\n    \"SCORE2: TOWN>>5vp, 4EARTH->1SPD\",\n    \"SCORE3: D>>2vp, 4WATER->1P\",\n    \"SCORE4: SA/SH>>5vp, 2FIRE->1W\",\n    \"SCORE5: D>>2vp, 4FIRE->4PW\",\n    \"SCORE6: TP>>3vp, 4WATER->1SPD\",\n    \"SCORE7: SA/SH>>5vp, 2AIR->1W\",\n    \"SCORE8: TP>>3vp, 4AIR->1SPD\",\n    \"SCORE9: TE>>4vp, 1CULT->2C\"\n];\nconst COLORS = [\n    \"black\",\n    \"blue\",\n    \"brown\",\n    \"gray\",\n    \"green\",\n    \"red\",\n    \"yellow\"\n];\nconst FACTIONS = [\n    {\n        faction: \"Alchemists\",\n        color: \"black\"\n    },\n    {\n        faction: \"Auren\",\n        color: \"green\"\n    },\n    {\n        faction: \"Chaos Magicians\",\n        color: \"red\"\n    },\n    {\n        faction: \"Cultists\",\n        color: \"brown\"\n    },\n    {\n        faction: \"Darklings\",\n        color: \"black\"\n    },\n    {\n        faction: \"Dwarves\",\n        color: \"gray\"\n    },\n    {\n        faction: \"Engineers\",\n        color: \"gray\"\n    },\n    {\n        faction: \"Fakirs\",\n        color: \"yellow\"\n    },\n    {\n        faction: \"Giants\",\n        color: \"red\"\n    },\n    {\n        faction: \"Halflings\",\n        color: \"brown\"\n    },\n    {\n        faction: \"Mermaids\",\n        color: \"blue\"\n    },\n    {\n        faction: \"Nomads\",\n        color: \"yellow\"\n    },\n    {\n        faction: \"Swarmlings\",\n        color: \"blue\"\n    },\n    {\n        faction: \"Witches\",\n        color: \"green\"\n    }\n];\n\nexport { BONUS_TILES, ROUND_TILES, COLORS, FACTIONS };\n","import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport { BONUS_TILES, ROUND_TILES, COLORS, FACTIONS } from \"./data.js\";\n\nlet renderCount = 0;\n\n\nfunction App() {\n  renderCount++;\n  const GAMESTATE_LENGTH = 119;\n  const { register, handleSubmit, watch, errors } = useForm();\n  // const [gamestate, setGamestate] = useState(null);\n  const onSubmit = data => {\n    //setGamestate(data);\n    //makePrediction();\n  }\n  const [predictions, setPredictions] = useState([]);\n  const [model, setModel] = useState(null);\n  const [sortedPredictions, setSortedPredictions] = useState([]);\n  const [gameURL, setGameURL] = useState(\"4pLeague_S26_D6L10_G4\");\n\n\n  const fetchGameState = () => {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        var game_state = JSON.parse(xhr.response);\n        setRoundScoreTiles(game_state.events.global);\n        setMissingBonusTiles(game_state.ledger);\n        setFactions(game_state.order);\n        makePrediction();\n      }\n    };\n    // instead of having a backend, we proxy the HTTP request with cors-anywhere\n    xhr.open(\"POST\", \"https://cors-anywhere.herokuapp.com/https://terra.snellman.net/app/view-game/\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    // payload must be e.g. \"game=4pLeague_S26_D6L10_G4\".\n    var payload = \"game=\" + document.getElementById(\"game_id\").value;\n    xhr.send(payload);\n  }\n\n  // most elements of the input are garbage, but we look for e.g. round 2 had scoring tile 3:\n  // {SCORE3 : {round : {2: 1, all: 1}}\n  const setRoundScoreTiles = (global_events) => {\n    var i;\n    var score;\n    var round;\n    let select_elem;\n    for (i = 0; i < 20; i++) {\n      let maybe_key = 'SCORE' + i;\n      score = global_events[maybe_key];\n      if (score) {\n        // Maybe this shows up first? let's not rely on order.\n        delete score.round.all;\n        round = Object.keys(score.round)[0];\n        select_elem = document.getElementsByName('round' + round)[0];\n        select_elem.value = i - 1;\n      }\n    }\n  }\n\n  const setFactions = (factions) => {\n    // console.log(\"setting factions\");\n    for (let i = 0; i < 3; i++) {\n      let select_elem = document.getElementsByName('fact' + (i + 1))[0];\n      //console.log(select_elem);\n      let myIndex = 0;\n      let j = 0;\n      // console.log(factions[i]);\n      for (j = 0; j < FACTIONS.length; j++) {\n        //console.log(FACTIONS[j].faction.toLowerCase());\n        if (FACTIONS[j].faction.toLowerCase() === factions[i]) {\n          //console.log(factions[i]);\n          select_elem.value = j;\n        }\n      }\n      //console.log(FACTIONS.indexOf(facto))\n      //select_elem.value = FACTIONS.indexOf(factions[i]);\n    }\n  }\n\n  const setMissingBonusTiles = (ledger) => {\n    let num_removed = 0;\n    let bon_num;\n    let comment;\n    let select_elem;\n    for (let i = 0; i < ledger.length; i++) {\n      comment = ledger[i].comment;\n      if (comment && comment.startsWith(\"Removing tile BON\")) {\n        bon_num = parseInt(comment[comment.length - 1]);\n        select_elem = document.getElementsByName('bonus' + (num_removed + 1))[0];\n        select_elem.value = bon_num - 1;\n        num_removed++;\n      }\n    }\n    // makePrediction();\n  }\n\n  const makePrediction = () => {\n\n    //first three elements of gamestate: missing bonus tiles by index\n    //next 6 are round scoring tiles by index\n    //last three are already-selected factions by index (\"none\" if not selected)\n\n    let gamestate = [watch(\"bonus1\"), watch(\"bonus2\"), watch(\"bonus3\"), watch(\"round1\"), watch(\"round2\"), watch(\"round3\"), watch(\"round4\"), watch(\"round5\"), watch(\"round6\"), watch(\"fact1\"), watch(\"fact2\"), watch(\"fact3\")];\n    //console.log(gamestate);\n    let onehot = new Array(GAMESTATE_LENGTH).fill(0);\n\n    //first 10 digits of onehot encoding get a 1 if indexed bonus tile is missing\n    //index 0-9\n    onehot[gamestate[0]] = 1;\n    onehot[gamestate[1]] = 1;\n    onehot[gamestate[2]] = 1;\n\n    //index 10-18\n    //next 9 digits get a 1 if indexed round tile is missing\n    //first set all to 1...\n    for (let i = 10; i < 19; i++) {\n      onehot[i] = 1;\n    }\n    //...then set to 0 if round tile is found in gamestate\n    for (let i = 3; i < 9; i++) {\n      if (gamestate[i] !== \"-\") {\n        onehot[parseInt(gamestate[i]) + 10] = 0;\n      }\n    }\n    //console.log(onehot);\n\n    //index 19-72\n    //next 6*9=54 bits are onehot encoding of round bonus tiles. \n    for (let i = 0; i < 6; i++) {\n      onehot[parseInt(gamestate[i + 3]) + 19 + (i * 9)] = 1;\n    }\n\n    //index 73-86\n    //onehot encoding of previously selected factions\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        onehot[parseInt(gamestate[i + 9]) + 73] = 1;\n      }\n    }\n\n    //index 87-93\n    //onehot encoding of previously selected colors\n    let prevColors = [];\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        prevColors[i] = COLORS.indexOf(FACTIONS[parseInt(gamestate[i + 9])].color);\n      }\n      onehot[parseInt(prevColors[i]) + 87] = 1;\n    }\n\n    //index 94-97\n    //onehot encoding of your player number\n    let nPrevPlayers = 0;\n    for (let i = 0; i < 3; i++) {\n      if (gamestate[i + 9] !== \"none\") {\n        nPrevPlayers++;\n      }\n    }\n    onehot[nPrevPlayers + 94] = 1;\n\n\n\n    //console.log(onehot);\n    let gamestateInputs = [];\n    for (let i = 0; i < FACTIONS.length; i++) {\n      //      gamestateInputs[i] = new Array(GAMESTATE_LENGTH).fill(0);\n      gamestateInputs[i] = Array.from(onehot);\n      //encode faction to predict for\n      gamestateInputs[i][98 + i] = 1;\n      //encode color for this faction\n      var myColor = FACTIONS[i].color;\n      var colorIndex = COLORS.indexOf(myColor);\n      gamestateInputs[i][112 + colorIndex] = 1;\n    }\n\n    (async () => {\n      const model = await tf.loadLayersModel('./model/model.json');\n      setModel(model);\n      const pred = tf.tidy(() => {\n        const output = model.predict(tf.tensor(gamestateInputs));\n        let sortedPredictions = Array.from(output.dataSync());\n        let unavailableColors = [];\n\n        for (let i = 0; i < 3; i++) {\n          if (gamestate[i + 9] !== \"none\") {\n            unavailableColors.push(FACTIONS[parseInt(gamestate[i + 9])].color);\n          }\n        }\n        // console.log(\"unavailable colors: \" + unavailableColors);\n        for (let i = 0; i < sortedPredictions.length; i++) {\n          sortedPredictions[i] = { fact: FACTIONS[i].faction, color: FACTIONS[i].color, score: sortedPredictions[i], class: (unavailableColors.includes(FACTIONS[i].color) ? \"unavailable\" : FACTIONS[i].color) }\n        }\n        sortedPredictions.sort((a, b) => (a.score < b.score) ? 1 : -1);\n\n        //console.log(sortedPredictions);\n        setPredictions(sortedPredictions);\n      });\n    })();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>Render Counter: {renderCount}</p> */}\n        {/* <h2>Terra Mystica Faction Picker</h2> */}\n        <h3>Load Game from Snellman</h3>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div><input id=\"game_id\" type=\"text\" defaultValue={gameURL}></input><button onClick={fetchGameState}>LOAD</button></div>\n          <h3>Missing Bonus Tiles</h3>\n          {/* \n        ~~~Checkbox UI~~~\n        <ul class=\"inputList\">\n          {BONUS_TILES.map((x, y) => <li><input key={y} type='checkbox' />{x}</li>)}\n        </ul> */}\n          {[...Array(3)].map((x, i) =>\n            <div key={i}><select name={\"bonus\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"-\">-</option>{BONUS_TILES.map((x, y) => <option key={y} value={y}>{x}</option>)}</select></div>\n          )}\n          <h3>Scoring Tiles</h3>\n          {[...Array(6)].map((x, i) =>\n            <div key={i}>Round {i + 1}: <select name={\"round\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"-\">-</option>{ROUND_TILES.map((x, y) => <option key={y} value={y}>{x}</option>)}</select></div>\n          )\n          }\n          <h3>Already Selected Factions</h3>\n\n          {\n            [...Array(3)].map((x, i) =>\n              <div key={i}><select name={\"fact\" + (i + 1)} ref={register} onChange={makePrediction}><option key=\"blank\" value=\"none\">none</option>{FACTIONS.map((x, y) => <option key={y} value={y}>{x.faction}</option>)}</select></div>\n            )\n          }\n          <h3>Predictions</h3>\n\n          {/* <input type=\"submit\" /> */}\n        </form>\n        <div>\n          <table id=\"predictionsList\">\n            <tbody>\n              {predictions.map((x, i) =>\n                <tr key={i} className={x.class}><td>{x.fact}</td><td>\n                  {x.score.toFixed(3)}</td></tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </header >\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}